[{"E:\\itInCubator\\to_do_list_06_main\\src\\index.tsx":"1","E:\\itInCubator\\to_do_list_06_main\\src\\reportWebVitals.ts":"2","E:\\itInCubator\\to_do_list_06_main\\src\\app\\store.ts":"3","E:\\itInCubator\\to_do_list_06_main\\src\\app\\App.tsx":"4","E:\\itInCubator\\to_do_list_06_main\\src\\features\\TodolistsList\\tasks-reducer.ts":"5","E:\\itInCubator\\to_do_list_06_main\\src\\features\\TodolistsList\\todolists-reducer.ts":"6","E:\\itInCubator\\to_do_list_06_main\\src\\features\\TodolistsList\\TodolistsList.tsx":"7","E:\\itInCubator\\to_do_list_06_main\\src\\api\\todolists-api.ts":"8","E:\\itInCubator\\to_do_list_06_main\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx":"9","E:\\itInCubator\\to_do_list_06_main\\src\\components\\AddItemForm\\AddItemForm.tsx":"10","E:\\itInCubator\\to_do_list_06_main\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx":"11","E:\\itInCubator\\to_do_list_06_main\\src\\components\\EditableSpan\\EditableSpan.tsx":"12","E:\\itInCubator\\to_do_list_06_main\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx":"13","E:\\itInCubator\\to_do_list_06_main\\src\\app\\appReducer.ts":"14","E:\\itInCubator\\to_do_list_06_main\\src\\utils\\errorUtils.ts":"15","E:\\itInCubator\\to_do_list_06_main\\src\\features\\Login\\Login.tsx":"16","E:\\itInCubator\\to_do_list_06_main\\src\\features\\Login\\auth-reducer.ts":"17"},{"size":643,"mtime":1614104838953,"results":"18","hashOfConfig":"19"},{"size":425,"mtime":1607869388000,"results":"20","hashOfConfig":"19"},{"size":1182,"mtime":1615670539875,"results":"21","hashOfConfig":"19"},{"size":2544,"mtime":1615673236655,"results":"22","hashOfConfig":"19"},{"size":5983,"mtime":1614272221406,"results":"23","hashOfConfig":"19"},{"size":5216,"mtime":1614272497164,"results":"24","hashOfConfig":"19"},{"size":4025,"mtime":1615672797441,"results":"25","hashOfConfig":"19"},{"size":3086,"mtime":1615673074669,"results":"26","hashOfConfig":"19"},{"size":4213,"mtime":1614255717941,"results":"27","hashOfConfig":"19"},{"size":1595,"mtime":1614255655311,"results":"28","hashOfConfig":"19"},{"size":1774,"mtime":1614103979140,"results":"29","hashOfConfig":"19"},{"size":952,"mtime":1594154724000,"results":"30","hashOfConfig":"19"},{"size":1039,"mtime":1614257130455,"results":"31","hashOfConfig":"19"},{"size":1959,"mtime":1615672372247,"results":"32","hashOfConfig":"19"},{"size":786,"mtime":1614270959667,"results":"33","hashOfConfig":"19"},{"size":3014,"mtime":1615670983048,"results":"34","hashOfConfig":"19"},{"size":2263,"mtime":1615673199340,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"l3p77m",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},"E:\\itInCubator\\to_do_list_06_main\\src\\index.tsx",[],["78","79"],"E:\\itInCubator\\to_do_list_06_main\\src\\reportWebVitals.ts",[],"E:\\itInCubator\\to_do_list_06_main\\src\\app\\store.ts",[],"E:\\itInCubator\\to_do_list_06_main\\src\\app\\App.tsx",["80","81"],"import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {initializedAppTC, RequestStatusType} from \"./appReducer\";\r\nimport {BrowserRouter, Route} from \"react-router-dom\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport { logoutTC } from '../features/Login/auth-reducer'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App ({demo = false}: PropsType) {\r\n    let status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    let isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn )\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializedAppTC())\r\n    }, [])\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n    if(!isInitialized){\r\n        return <div\r\n            style={{position: \"fixed\", width: \"100%\", top: \"30%\" , textAlign: \"center\"}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <div className=\"App\">\r\n                <AppBar position=\"static\">\r\n                    <ErrorSnackbar/>\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\">\r\n                            News\r\n                        </Typography>\r\n                        {isLoggedIn && <Button onClick={logoutHandler} color=\"inherit\">Log out</Button>}\r\n                    </Toolbar>\r\n                    {status === \"loading\" && <LinearProgress/>}\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <Route exact path={\"/\"} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={\"/login\"} render={() => <Login/>}/>\r\n\r\n                </Container>\r\n            </div>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default App\r\n","E:\\itInCubator\\to_do_list_06_main\\src\\features\\TodolistsList\\tasks-reducer.ts",[],"E:\\itInCubator\\to_do_list_06_main\\src\\features\\TodolistsList\\todolists-reducer.ts",[],"E:\\itInCubator\\to_do_list_06_main\\src\\features\\TodolistsList\\TodolistsList.tsx",["82","83","84","85","86","87","88","89"],"import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if(demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if(!isLoggedIn) {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","E:\\itInCubator\\to_do_list_06_main\\src\\api\\todolists-api.ts",[],"E:\\itInCubator\\to_do_list_06_main\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx",["90","91","92","93","94","95"],"import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if(demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n\r\n    }, [props.todolist.id])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === \"loading\"}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === \"loading\"}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","E:\\itInCubator\\to_do_list_06_main\\src\\components\\AddItemForm\\AddItemForm.tsx",["96","97","98"],"import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","E:\\itInCubator\\to_do_list_06_main\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx",["99","100","101"],"import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","E:\\itInCubator\\to_do_list_06_main\\src\\components\\EditableSpan\\EditableSpan.tsx",[],"E:\\itInCubator\\to_do_list_06_main\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx",[],"E:\\itInCubator\\to_do_list_06_main\\src\\app\\appReducer.ts",[],"E:\\itInCubator\\to_do_list_06_main\\src\\utils\\errorUtils.ts",[],"E:\\itInCubator\\to_do_list_06_main\\src\\features\\Login\\Login.tsx",["102"],"import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn )\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if(!values.email){\r\n                return {\r\n                    email: \"Email is required\"\r\n                }\r\n            }\r\n            if(!values.password) {\r\n                return {\r\n                    password: \"Password is password\"\r\n                }\r\n            }\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n        },\r\n    });\r\n\r\n    if(isLoggedIn){\r\n        return <Redirect to={\"/\"}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox {...formik.getFieldProps(\"rememberMe\")} checked={formik.values.rememberMe}/>}\r\n\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","E:\\itInCubator\\to_do_list_06_main\\src\\features\\Login\\auth-reducer.ts",["103","104"],"import {Dispatch} from \"react\";\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusAC} from \"../../app/appReducer\";\r\nimport {authAPI, LoginParamType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/errorUtils\";\r\nimport {updateTaskAC} from \"../TodolistsList/tasks-reducer\";\r\n\r\nconst initialState: InitialStateType = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch(action.type) {\r\n        case \"login/SET-IS-LOGGED-IN\":\r\n            return {\r\n                ...state, isLoggedIn: action.value\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\n export const setIsLoggedInAC = (value: boolean) =>\r\n     ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamType) => (dispatch: Dispatch<ActionsType | SetAppStatusAC | SetAppErrorActionType> ) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    authAPI.login(data)\r\n        .then(response => {\r\n            if(response.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError(response.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error.message, dispatch)\r\n        })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType | SetAppStatusAC | SetAppErrorActionType> ) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    authAPI.logout()\r\n        .then(response => {\r\n            if(response.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError(response.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error.message, dispatch)\r\n        })\r\n}\r\n\r\n\r\n// types\r\n type InitialStateType = {\r\n     isLoggedIn: boolean\r\n }\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC>\r\n\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusAC | SetAppErrorActionType>",{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","severity":1,"message":"110","line":35,"column":8,"nodeType":"111","endLine":35,"endColumn":10,"suggestions":"112"},{"ruleId":"109","severity":1,"message":"113","line":38,"column":8,"nodeType":"111","endLine":38,"endColumn":10,"suggestions":"114"},{"ruleId":"109","severity":1,"message":"115","line":35,"column":8,"nodeType":"111","endLine":35,"endColumn":10,"suggestions":"116"},{"ruleId":"109","severity":1,"message":"113","line":40,"column":8,"nodeType":"111","endLine":40,"endColumn":10,"suggestions":"117"},{"ruleId":"109","severity":1,"message":"113","line":45,"column":8,"nodeType":"111","endLine":45,"endColumn":10,"suggestions":"118"},{"ruleId":"109","severity":1,"message":"113","line":50,"column":8,"nodeType":"111","endLine":50,"endColumn":10,"suggestions":"119"},{"ruleId":"109","severity":1,"message":"113","line":55,"column":8,"nodeType":"111","endLine":55,"endColumn":10,"suggestions":"120"},{"ruleId":"109","severity":1,"message":"113","line":60,"column":8,"nodeType":"111","endLine":60,"endColumn":10,"suggestions":"121"},{"ruleId":"109","severity":1,"message":"113","line":65,"column":8,"nodeType":"111","endLine":65,"endColumn":10,"suggestions":"122"},{"ruleId":"109","severity":1,"message":"113","line":70,"column":8,"nodeType":"111","endLine":70,"endColumn":10,"suggestions":"123"},{"ruleId":"109","severity":1,"message":"124","line":37,"column":8,"nodeType":"111","endLine":37,"endColumn":27,"suggestions":"125"},{"ruleId":"109","severity":1,"message":"126","line":41,"column":8,"nodeType":"111","endLine":41,"endColumn":42,"suggestions":"127"},{"ruleId":"109","severity":1,"message":"126","line":48,"column":8,"nodeType":"111","endLine":48,"endColumn":54,"suggestions":"128"},{"ruleId":"109","severity":1,"message":"126","line":50,"column":95,"nodeType":"111","endLine":50,"endColumn":134,"suggestions":"129"},{"ruleId":"109","severity":1,"message":"126","line":51,"column":101,"nodeType":"111","endLine":51,"endColumn":140,"suggestions":"130"},{"ruleId":"109","severity":1,"message":"126","line":52,"column":107,"nodeType":"111","endLine":52,"endColumn":146,"suggestions":"131"},{"ruleId":"132","severity":1,"message":"133","line":2,"column":9,"nodeType":"134","messageId":"135","endLine":2,"endColumn":12},{"ruleId":"132","severity":1,"message":"136","line":2,"column":14,"nodeType":"134","messageId":"135","endLine":2,"endColumn":20},{"ruleId":"132","severity":1,"message":"137","line":2,"column":22,"nodeType":"134","messageId":"135","endLine":2,"endColumn":33},{"ruleId":"109","severity":1,"message":"126","line":15,"column":97,"nodeType":"111","endLine":15,"endColumn":130,"suggestions":"138"},{"ruleId":"109","severity":1,"message":"126","line":20,"column":8,"nodeType":"111","endLine":20,"endColumn":41,"suggestions":"139"},{"ruleId":"109","severity":1,"message":"126","line":24,"column":8,"nodeType":"111","endLine":24,"endColumn":41,"suggestions":"140"},{"ruleId":"141","severity":1,"message":"142","line":45,"column":29,"nodeType":"143","endLine":46,"endColumn":50},{"ruleId":"132","severity":1,"message":"144","line":5,"column":9,"nodeType":"134","messageId":"135","endLine":5,"endColumn":21},{"ruleId":"132","severity":1,"message":"145","line":67,"column":6,"nodeType":"134","messageId":"135","endLine":67,"endColumn":19},"no-native-reassign",["146"],"no-negated-in-lhs",["147"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["148"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["149"],"React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'isLoggedIn'. Either include them or remove the dependency array.",["150"],["151"],["152"],["153"],["154"],["155"],["156"],["157"],"React Hook useEffect has missing dependencies: 'demo' and 'dispatch'. Either include them or remove the dependency array.",["158"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["159"],["160"],["161"],["162"],["163"],"@typescript-eslint/no-unused-vars","'Box' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'FormControl' is defined but never used.",["164"],["165"],["166"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","'updateTaskAC' is defined but never used.","'ThunkDispatch' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"167","fix":"168"},{"desc":"167","fix":"169"},{"desc":"170","fix":"171"},{"desc":"167","fix":"172"},{"desc":"167","fix":"173"},{"desc":"167","fix":"174"},{"desc":"167","fix":"175"},{"desc":"167","fix":"176"},{"desc":"167","fix":"177"},{"desc":"167","fix":"178"},{"desc":"179","fix":"180"},{"desc":"181","fix":"182"},{"desc":"181","fix":"183"},{"desc":"181","fix":"184"},{"desc":"181","fix":"185"},{"desc":"181","fix":"186"},{"desc":"181","fix":"187"},{"desc":"181","fix":"188"},{"desc":"181","fix":"189"},"Update the dependencies array to be: [dispatch]",{"range":"190","text":"191"},{"range":"192","text":"191"},"Update the dependencies array to be: [demo, dispatch, isLoggedIn]",{"range":"193","text":"194"},{"range":"195","text":"191"},{"range":"196","text":"191"},{"range":"197","text":"191"},{"range":"198","text":"191"},{"range":"199","text":"191"},{"range":"200","text":"191"},{"range":"201","text":"191"},"Update the dependencies array to be: [demo, dispatch, props.todolist.id]",{"range":"202","text":"203"},"Update the dependencies array to be: [props]",{"range":"204","text":"205"},{"range":"206","text":"205"},{"range":"207","text":"205"},{"range":"208","text":"205"},{"range":"209","text":"205"},{"range":"210","text":"205"},{"range":"211","text":"205"},{"range":"212","text":"205"},[1243,1245],"[dispatch]",[1332,1334],[1323,1325],"[demo, dispatch, isLoggedIn]",[1494,1496],[1665,1667],[1870,1872],[2083,2085],[2284,2286],[2431,2433],[2610,2612],[1467,1486],"[demo, dispatch, props.todolist.id]",[1601,1635],"[props]",[1866,1912],[2011,2050],[2153,2192],[2301,2340],[766,799],[1072,1105],[1262,1295]]