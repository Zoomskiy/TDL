{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/errorUtils.ts","features/Login/auth-reducer.ts","app/appReducer.ts","features/TodolistsList/tasks-reducer.ts","features/TodolistsList/todolists-reducer.ts","app/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","resultCode","action","updateTaskAC","catch","console","warn","rootReducer","combineReducers","state","filter","todoListId","map","todolist","copyState","todolists","forEach","tl","entityStatus","app","auth","store","createStore","applyMiddleware","thunkMiddleware","window","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","setTasksAC","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","response","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","errors","FormControlLabel","control","App","responce","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","render","width","top","textAlign","CircularProgress","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.be65b47a.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '4f645351-6d44-4605-a79e-a6fdb6d61818'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport type LoginParamType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\nexport const authAPI = {\r\n    login (data: LoginParamType) {\r\n        return instance.post<ResponseType<{userId?: number}>>('auth/login', data);\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<{userId?: number}>>('auth/login');\r\n    },\r\n    me () {\r\n        return instance.get<ResponseType<{id: number, email: string, login: string}>>(\"auth/me\")\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {setAppErrorAC, SetAppErrorActionType, SetAppStatusAC, setAppStatusAC} from \"../app/appReducer\";\r\nimport {ResponseType} from \"../api/todolists-api\";\r\nimport {Dispatch} from \"react\";\r\n\r\nexport const handleServerAppError = <D> (data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusAC>) => {\r\n    if(data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC(\"Some error occurred\"))\r\n    }\r\n    dispatch(setAppStatusAC(\"failed\"))\r\n}\r\nexport const handleServerNetworkError =  (error: {message: string}, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusAC>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : \"Some Error occurred\"))\r\n    dispatch(setAppStatusAC(\"failed\"))\r\n}\r\n","import {Dispatch} from \"react\";\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusAC} from \"../../app/appReducer\";\r\nimport {authAPI, LoginParamType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/errorUtils\";\r\nimport {updateTaskAC} from \"../TodolistsList/tasks-reducer\";\r\n\r\nconst initialState: InitialStateType = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch(action.type) {\r\n        case \"login/SET-IS-LOGGED-IN\":\r\n            return {\r\n                ...state, isLoggedIn: action.value\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\n export const setIsLoggedInAC = (value: boolean) =>\r\n     ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamType) => (dispatch: Dispatch<ActionsType | SetAppStatusAC | SetAppErrorActionType> ) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    authAPI.login(data)\r\n        .then(response => {\r\n            if(response.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError(response.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error.message, dispatch)\r\n        })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType | SetAppStatusAC | SetAppErrorActionType> ) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    authAPI.logout()\r\n        .then(response => {\r\n            if(response.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError(response.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error.message, dispatch)\r\n        })\r\n}\r\n\r\n\r\n// types\r\n type InitialStateType = {\r\n     isLoggedIn: boolean\r\n }\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC>\r\n\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusAC | SetAppErrorActionType>","import {Dispatch} from \"react\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\n\r\n\r\nconst initialState: InitialStateType = {\r\n    status: \"idle\",\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch(action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case \"APP/SET-IS-INITIALIZED\":\r\n            return {...state, isInitialized: action.value}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => {\r\n    return {\r\n        type: 'APP/SET-ERROR',\r\n        error\r\n    } as const\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => {\r\n    return {\r\n        type: 'APP/SET-STATUS',\r\n        status\r\n    } as const\r\n}\r\nexport const setAppInitializedAC = (value: boolean) => {\r\n    return {\r\n        type: 'APP/SET-IS-INITIALIZED',\r\n        value\r\n    } as const\r\n}\r\n\r\nexport const initializedAppTC = () => (dispatch: Dispatch<any>) => {\r\n    authAPI.me()\r\n        .then(responce => {\r\n            if(responce.data.resultCode === 0){\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppInitializedAC(true))\r\n            }\r\n\r\n\r\n        })\r\n        .catch( () => {\r\n\r\n        })\r\n\r\n}\r\n\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusAC = ReturnType<typeof setAppStatusAC>;\r\n\r\ntype ActionsType = SetAppErrorActionType\r\n    | SetAppStatusAC\r\n    | ReturnType<typeof setAppInitializedAC>\r\n\r\nexport type RequestStatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\"\r\nexport type InitialStateType = {\r\n    status: 'idle' | 'loading' | 'succeeded' | 'failed'\r\n    error: string | null\r\n    isInitialized: boolean\r\n}","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport { SetAppErrorActionType, SetAppStatusAC, setAppStatusAC} from \"../../app/appReducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/errorUtils\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            if(res.data) {\r\n                const tasks = res.data.items\r\n                const action = setTasksAC(tasks, todolistId)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            }else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error.message, dispatch)\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error.message, dispatch)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: ThunkDispatch ) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if(res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            }else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error.message, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if(res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                }else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch(error => {\r\n                handleServerNetworkError(error.message, dispatch)\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusAC | SetAppErrorActionType>","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, SetAppErrorActionType, SetAppStatusAC, setAppStatusAC} from \"../../app/appReducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/errorUtils\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch(action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: \"idle\"}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case \"CHANGE-TODOLIST-ENTITY-STATUS\":\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: \"idle\"}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS',\r\n    id,\r\n    status\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                if(res.data){\r\n                    dispatch(setTodolistsAC(res.data))\r\n                    dispatch(setAppStatusAC(\"succeeded\"))\r\n                }else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch(error => {\r\n                handleServerNetworkError(error.message, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, \"loading\"))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                if(res.data.resultCode === 0) {\r\n                    dispatch(removeTodolistAC(todolistId))\r\n                    dispatch(setAppStatusAC(\"succeeded\"))\r\n                }else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                handleServerNetworkError(error.message, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                if(res.data.resultCode === 0) {\r\n                    dispatch(addTodolistAC(res.data.data.item))\r\n                    dispatch(setAppStatusAC(\"succeeded\"))\r\n                }else {\r\n                    handleServerAppError(res.data,dispatch)\r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                handleServerNetworkError(error.message, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n            .catch(error => {\r\n                handleServerNetworkError(error.message, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusAC | SetAppErrorActionType>","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from \"./appReducer\";\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if(demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n\r\n    }, [props.todolist.id])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === \"loading\"}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === \"loading\"}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if(demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if(!isLoggedIn) {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/appReducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    }\r\n\r\n    const isOpen = error !== null\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={3000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn )\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if(!values.email){\r\n                return {\r\n                    email: \"Email is required\"\r\n                }\r\n            }\r\n            if(!values.password) {\r\n                return {\r\n                    password: \"Password is password\"\r\n                }\r\n            }\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n        },\r\n    });\r\n\r\n    if(isLoggedIn){\r\n        return <Redirect to={\"/\"}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox {...formik.getFieldProps(\"rememberMe\")} checked={formik.values.rememberMe}/>}\r\n\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {initializedAppTC, RequestStatusType} from \"./appReducer\";\r\nimport {BrowserRouter, HashRouter, Route} from \"react-router-dom\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport { logoutTC } from '../features/Login/auth-reducer'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App ({demo = false}: PropsType) {\r\n    let status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    let isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn )\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializedAppTC())\r\n    }, [])\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n    if(!isInitialized){\r\n        return <div\r\n            style={{position: \"fixed\", width: \"100%\", top: \"30%\" , textAlign: \"center\"}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <div className=\"App\">\r\n                <AppBar position=\"static\">\r\n                    <ErrorSnackbar/>\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\">\r\n                            News\r\n                        </Typography>\r\n                        {isLoggedIn && <Button onClick={logoutHandler} color=\"inherit\">Log out</Button>}\r\n                    </Toolbar>\r\n                    {status === \"loading\" && <LinearProgress/>}\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <Route path={\"/\"} render={() => <TodolistsList />}/>\r\n                    <Route path={\"/login\"} render={() => <Login/>}/>\r\n\r\n                </Container>\r\n            </div>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from \"react\";\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport App from \"./app/App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}